# –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–∫–æ–±–æ—á–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å üå∂Ô∏è
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_correct_bracket(text), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–µ–ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É text,
# —Å–æ—Å—Ç–æ—è—â—É—é –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ ( –∏ ) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True –µ—Å–ª–∏ –ø–æ—Å—Ç—É–ø–∏–≤—à–∞—è –Ω–∞ –≤—Ö–æ–¥ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π
# —Å–∫–æ–±–æ—á–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∫–æ–±–æ—á–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞, —Å–æ—Å—Ç–æ—è—â–∞—è —Ç–æ–ª—å–∫–æ –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ ( –∏ ),
# –≥–¥–µ –∫–∞–∂–¥–æ–π –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–µ –Ω–∞–π–¥–µ—Ç—Å—è –ø–∞—Ä–Ω–∞—è –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ (–ø—Ä–∏ —ç—Ç–æ–º –∫–∞–∂–¥–∞—è –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –¥–æ–ª–∂–Ω–∞
# –±—ã—Ç—å –ª–µ–≤–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –µ–π –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏).

# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def is_correct_bracket(text):
    count = 0
    for i in range(len(text)):
        if text[i] == "(":
            count += 1
        elif text[i] == ")":
            count -= 1
        if count == -1:
            return False
    if count == 0:
        return True
    else:
        return False
# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
txt = input()

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(is_correct_bracket(txt))